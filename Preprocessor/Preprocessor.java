package main;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

//import table.*;


/**
 * Instantiated to connect to the preconfigured database and load its tables
 * into memory. Queries can be sent in order to obtain more limited resultSets.
 * 
 * @author      Dan Herve
 */
public class Preprocessor {
	
	private Connection connection = null;
	private Statement statement = null;
	private ResultSet resultSet = null;
	
	private static Map<String, ResultSet> tables = null;
	
	public final String ARTIST_TAG = "artist_mbtag";
	public final String ARTIST_TERM = "artist_term";
	public final String ARTISTS = "artists";
	public final String TERMS = "terms";
	public final String TAGS = "mbtags";
	public final String SONGS = "songs";
	
	private boolean loadTables = true;
	
	
	public Preprocessor() {
		
		try {
	        connection = getConnection();
	        statement = connection.createStatement();
	        init();
	        
		} catch (SQLException e) {
	        e.printStackTrace();
		}
	}
	
	public Preprocessor(boolean loadTables) {
		try {
	        connection = getConnection();
	        statement = connection.createStatement();
	        this.loadTables = loadTables;
	        if(loadTables) {
	        	init();
	        }
	        
	        
		} catch (SQLException e) {
	        e.printStackTrace();
		}
	}
	
	public void loadTables() throws SQLException {
		if(!loadTables)
			init();
	}
			
	public void init() throws SQLException {		
		
		tables = new HashMap<String, ResultSet>();
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + ARTIST_TAG);
		tables.put(ARTIST_TAG, resultSet);
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + ARTIST_TERM);
		tables.put(ARTIST_TERM, resultSet);
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + ARTISTS);
		tables.put(ARTISTS, resultSet);
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + TERMS);
		tables.put(TERMS, resultSet);
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + TAGS);
		tables.put(TAGS, resultSet);
		resultSet = statement.executeQuery("SELECT * FROM f16429team_music_recommend." + SONGS);
		tables.put(SONGS, resultSet);
	}
	
	/**
	 * Returns a ResultSet based on a SQL query
	 * 
	 * @param  query A String formatted like an SQL query
	 * @return      The ResultSet generated by the database
	 */
	public ResultSet runQuery(String query) {
		
		try {
			resultSet = statement.executeQuery(query);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return resultSet;
	}
	
	/**
	 * Returns one of the full tables loaded at startup
	 * 
	 * @param  key the tablename. Available as public constants
	 * @return      The ResultSet held in the Preprocessor
	 */
	public ResultSet getTable(String key) {
		return tables.get(key);
	}
	
	/*private Table dbToTable() {	//TODO ignore for now
		
		Table table = null;
		
		try {
		
		int columnCount = resultSet.getMetaData().getColumnCount();
		
		String[] attributeNames = new String[columnCount];
		Tuple tuple = new Tuple();
	    
		
		
		for(int i = 0; i < columnCount; i++) {
			 
			String columnHeader;
			
			columnHeader = resultSet.getMetaData().getColumnName(i + 1);
			
			attributeNames[i] = columnHeader;
		}
		
		table = new Table(attributeNames);
		
		while(resultSet.next()) {
		
			for(int i = 0; i < columnCount; i++) { //TODO figure out rows
				tuple.put(attributeNames[i], new Categorical(attributeNames[i], resultSet.getString(attributeNames[i])));
				//System.out.println(attributes[i]);
			
			}
			table.add(tuple);
			tuple = new Tuple();
			//System.out.println(columnCount);
		}
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return table;
	}*/
	/**
	 * Prints writes csv
	 * 
	 * @param  filename the name of the output file
	 * @param table the ResultSet defining the table to output
	 */
	public void writeCSV(String filename, ResultSet table) { 
		
		try {
		
			String[] attributes = new String[table.getMetaData().getColumnCount()];
			
			for(int i = 0; i < attributes.length; i++) {
				
				attributes[i] = table.getMetaData().getColumnName(i + 1);
			}		
		
			BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
			
			String temp = "";
			
			for(int j = 0; j < attributes.length; j++) {
				
				if(j != attributes.length - 1)
					temp +=attributes[j] + ",";
				else
					temp += attributes[j];
			}
			
			writer.write(temp);
			writer.newLine();
			
			while(table.next()) {
				
				temp = "";
				
				for(int j = 0; j < attributes.length; j++) {
					
					if(j != attributes.length - 1)
						temp += table.getString(attributes[j]) + ",";
					else
						temp += table.getString(attributes[j]);
				}
				
				writer.write(temp);
				
				if(!table.isLast())
					writer.newLine();				
			}
			writer.close();
			table.first();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private static Connection getConnection() throws SQLException{
        Connection connection; 
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
        } catch (InstantiationException e1) {
                e1.printStackTrace();
        } catch (IllegalAccessException e1) {
                e1.printStackTrace();
        } catch (ClassNotFoundException e1) {
                e1.printStackTrace();
        }
        //Create a connection to the database
        String serverName = "146.187.134.44:3306"; //remote is 146.187.134.44:3306
        String mydatabase = "f16429team_music_recommend"; //f16429_music_recommend
        String url = "jdbc:mysql://" + serverName + "/" + mydatabase; // a JDBC url
        String username = "f16429team"; //remote is "f16429team"
        String password = "1234";
        connection = DriverManager.getConnection(url, username, password);
        return connection;
    }
	
	/**
	 * Prints resultset to console
	 * 
	 * @param  resultSet ResultSet to print
	 */
	public void printQuery(ResultSet resultSet) {
		
		try {
	    	
			int columnCount = resultSet.getMetaData().getColumnCount();
	    
			for( int i = 1; i <= columnCount; i++) {
			 
				String columnHeader = resultSet.getMetaData().getColumnName(i);
					if(i == columnCount)
						System.out.println(String.format("%s\n", columnHeader));
					else
						System.out.print(String.format("%s, ", columnHeader));
			}
	      
			while (resultSet.next()) {
			//fill in this portion
	    	  
				String result = "";
	    	  
				for( int i = 1; i <= columnCount; i++) {
	    			 
					String columnHeader = resultSet.getMetaData().getColumnName(i);
					if(i == columnCount) {
	    			   
						System.out.println(resultSet.getString(columnHeader));
					}
					else
						System.out.print(String.format("%s, ", resultSet.getString(columnHeader)));
				}
	    	  
	         
				System.out.println(result);         
			}     
			resultSet.first();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Closes the connection to the database.
	 */
	public void close() {
		
		try {
			connection.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

        
       


